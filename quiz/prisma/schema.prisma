generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model alternativas {
  id          Int        @id @default(autoincrement())
  perguntasid Int
  resposta    String?    @db.VarChar(255)
  pathimage   String?    @db.VarChar(255)
  correta     Boolean    @default(false)
  perguntas   perguntas? @relation(fields: [perguntasid], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model campus {
  id         Int        @id @default(autoincrement())
  nomecampus String     @db.VarChar(255)
  usuarios   usuarios[]
}

model categorias {
  id        Int         @id @default(autoincrement())
  descricao String      @db.VarChar(25)
  status    Boolean     @default(true)
  imagem    String      @db.VarChar(255)
  cursoId   Int
  curso     curso?      @relation(fields: [cursoId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  perguntas perguntas[]
}

model curso {
  id              Int               @id @default(autoincrement())
  nome            String            @db.VarChar(255)
  imagem          String            @db.VarChar(255)
  categorias      categorias[]
  usuarios        usuarios[]
  quiz            quiz[]
  quiz_avaliativo quiz_avaliativo[]
}

model logs {
  id         Int       @id @default(autoincrement())
  datalogin  DateTime  @default(now()) @db.Date
  usuariosid Int
  descricao  String    @db.VarChar(100)
  usuarios   usuarios? @relation(fields: [usuariosid], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model perguntas {
  id                 Int                  @id @default(autoincrement())
  conteudo           String?
  perguntasnivelid   Int
  tempo              Int
  pathimage          String?
  status             Boolean              @default(true)
  categoriasid       Int
  quizid             Int?
  categorias         categorias?          @relation(fields: [categoriasid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  perguntasnivel     perguntasnivel?      @relation(fields: [perguntasnivelid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  quiz               quiz?                @relation(fields: [quizid], references: [id], onDelete: Cascade, onUpdate: NoAction)
  alternativas       alternativas[]
  progressoperguntas progressoperguntas[]
  quiz_avaliativo    quiz_avaliativo?     @relation(fields: [quizavaliativoid], references: [id], onDelete: Cascade, onUpdate: NoAction)
  quizavaliativoid   Int?
}

model perguntasnivel {
  id        Int         @id @default(autoincrement())
  nivel     Int
  pontuacao Int
  tempo     Int
  perguntas perguntas[]
}

model progressoperguntas {
  id          Int        @id @default(autoincrement())
  usuariosid  Int
  perguntasid Int
  perguntas   perguntas? @relation(fields: [perguntasid], references: [id], onDelete: Cascade, onUpdate: NoAction)
  usuarios    usuarios?  @relation(fields: [usuariosid], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model quiz {
  id        Int         @id @default(autoincrement())
  titulo    String      @db.VarChar(150)
  cursoid   Int
  imagem    String      @db.VarChar(255)
  curso     curso?      @relation(fields: [cursoid], references: [id], onDelete: Cascade, onUpdate: NoAction)
  perguntas perguntas[]
}

model quiz_avaliativo {
  id        Int         @id @default(autoincrement())
  titulo    String      @db.VarChar(150)
  imagem    String      @db.VarChar(255)
  status    Boolean     @default(true)
  usuarioid Int
  usuarios  usuarios?   @relation(fields: [usuarioid], references: [id], onDelete: Cascade, onUpdate: NoAction)
  cursoid   Int
  curso     curso?      @relation(fields: [cursoid], references: [id], onDelete: Cascade, onUpdate: NoAction)
  perguntas perguntas[]
  quiz_avaliativo_usuario quiz_avaliativo_usuario[]
}

model quiz_avaliativo_usuario {
  id        Int       @id @default(autoincrement())
  quizavaliativoid   Int 
  quiz_avaliativo  quiz_avaliativo? @relation(fields: [quizavaliativoid], references: [id], onDelete: Cascade, onUpdate: NoAction)
  usuarioid Int
  usuarios  usuarios? @relation(fields: [usuarioid], references: [id], onDelete: Cascade, onUpdate: NoAction)
  pontuacao Int
  horainicial DateTime  @db.Date
  horafinal DateTime    @db.Date
}

model usuarios {
  id                 Int                       @id @default(autoincrement())
  nome               String                    @db.VarChar(255)
  email              String                    @unique @db.VarChar(255)
  senha              String                    @db.VarChar(255)
  telefone           String                    @db.VarChar(15)
  sexo               Int
  datanascimento     DateTime                  @db.Date
  role               Int                       @default(3)
  uf                 String                    @db.VarChar(2)
  cidade             String                    @db.VarChar(255)
  foto               String                    @db.VarChar(255)
  pontuacao          Int                       @default(0)
  status             Boolean                   @default(true)
  turma              String                    @db.VarChar(255)
  periodo            Int
  cursoid            Int
  curso              curso?                    @relation(fields: [cursoid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  campusid           Int
  campus             campus?                   @relation(fields: [campusid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  logs               logs[]
  avaliacoes         quiz_avaliativo_usuario[]
  quizavaliativos    quiz_avaliativo[]
  progressoperguntas progressoperguntas[]
}

model menu {
  id       Int    @id @default(autoincrement())
  urlMenu  String @db.VarChar(255)
  iconMenu String @db.VarChar(255)
  role     Int
}
