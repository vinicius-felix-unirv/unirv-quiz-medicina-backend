generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model alternativas {
  id          Int       @id @default(autoincrement())
  perguntasid Int
  conteudo    String?   @db.VarChar(255)
  imagem      String?   @db.VarChar(255)
  correta     Boolean   @default(false)
  perguntas   perguntas @relation(fields: [perguntasid], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model campus {
  id         Int        @id @default(autoincrement())
  nomecampus String     @db.VarChar(255)
  usuarios   usuarios[]
}

model categorias {
  id        Int         @id @default(autoincrement())
  descricao String      @db.VarChar(25)
  status    Boolean     @default(true)
  cursoId   Int
  imagem    String      @db.VarChar(255)
  curso     curso       @relation(fields: [cursoId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  perguntas perguntas[]
}

model curso {
  id         Int          @id @default(autoincrement())
  nome       String       @db.VarChar(255)
  imagem     String       @db.VarChar(255)
  categorias categorias[]
  quiz       quiz[]
  usuarios   usuarios[]
}

model logs {
  id         Int      @id @default(autoincrement())
  datalogin  DateTime @default(now()) @db.Timestamp(6)
  usuariosid Int
  descricao  String   @db.VarChar(100)
  usuarios   usuarios @relation(fields: [usuariosid], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model perguntas {
  id                 Int                  @id @default(autoincrement())
  conteudo           String?
  tempo              Int
  pathimage          String?
  status             Boolean              @default(true)
  categoriasid       Int
  perguntasnivelid   Int
  quizid             Int?
  alternativas       alternativas[]
  categorias         categorias           @relation(fields: [categoriasid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  perguntasnivel     perguntasnivel       @relation(fields: [perguntasnivelid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  quiz               quiz?                @relation(fields: [quizid], references: [id], onDelete: Cascade, onUpdate: NoAction)
  progressoperguntas progressoperguntas[]
}

model perguntasnivel {
  id        Int         @id @default(autoincrement())
  nivel     Int
  pontuacao Int
  tempo     Int
  perguntas perguntas[]
}

model progressoperguntas {
  id          Int       @id @default(autoincrement())
  usuariosid  Int
  perguntasid Int
  perguntas   perguntas @relation(fields: [perguntasid], references: [id], onDelete: Cascade, onUpdate: NoAction)
  usuarios    usuarios  @relation(fields: [usuariosid], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model quiz {
  id                      Int                       @id @default(autoincrement())
  titulo                  String                    @db.VarChar(150)
  cursoid                 Int
  imagem                  String                    @db.VarChar(255)
  avaliativo              Boolean                   @default(false)
  status                  Boolean                   @default(true)
  usuarioid               Int
  perguntas               perguntas[]
  curso                   curso                     @relation(fields: [cursoid], references: [id], onDelete: Cascade, onUpdate: NoAction)
  usuarios                usuarios                  @relation(fields: [usuarioid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  quiz_avaliativo_usuario quiz_avaliativo_usuario[]
}

model quiz_avaliativo_usuario {
  id          Int      @id @default(autoincrement())
  usuarioid   Int
  pontuacao   Int
  horainicial DateTime @db.Date
  horafinal   DateTime @db.Date
  quizid      Int
  quiz        quiz     @relation(fields: [quizid], references: [id], onDelete: Cascade, onUpdate: NoAction)
  usuarios    usuarios @relation(fields: [usuarioid], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model usuarios {
  id                 Int                       @id @default(autoincrement())
  nome               String                    @db.VarChar(255)
  email              String                    @unique @db.VarChar(255)
  senha              String                    @db.VarChar(255)
  telefone           String                    @db.VarChar(15)
  sexo               Int
  datanascimento     DateTime                  @db.Date
  role               Int                       @default(3)
  uf                 String                    @db.VarChar(2)
  foto               String                    @db.VarChar(255)
  pontuacao          Int                       @default(0)
  status             Boolean                   @default(true)
  cidade             String                    @db.VarChar(255)
  campusid           Int
  cursoid            Int
  periodo            Int
  turma              String                    @db.VarChar(255)
  logs               logs[]
  progressoperguntas progressoperguntas[]
  quizavaliativos    quiz[]
  avaliacoes         quiz_avaliativo_usuario[]
  campus             campus                    @relation(fields: [campusid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  curso              curso                     @relation(fields: [cursoid], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model menu {
  id       Int    @id @default(autoincrement())
  urlMenu  String @db.VarChar(255)
  role     Int
  iconMenu String @db.VarChar(255)
}
