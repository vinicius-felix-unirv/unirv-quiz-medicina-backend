generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model alternativas {
  id          Int        @id @default(autoincrement())
  perguntasid Int
  resposta    String?    @db.VarChar
  pathimage   String?
  correta     Boolean    @default(false)
  perguntas   perguntas? @relation(fields: [perguntasid], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model campus {
  id         Int       @id @default(autoincrement())
  curso      String   @db.VarChar(255)
  turma      String   @db.VarChar(255)
  periodo    Int
  nome       String   @db.VarChar(100)
  usuariosid Int
  usuarios   usuarios? @relation(fields: [usuariosid], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model categorias {
  id             Int              @id @default(autoincrement())
  descricao      String          @db.VarChar(25)
  status         Boolean          @default(true)
  perguntas perguntas[]
}

model logs {
  id         Int       @id @default(autoincrement())
  datalogin  DateTime  @db.Date @default(now())
  usuariosid Int
  descricao  String    @db.VarChar(100)
  usuarios   usuarios? @relation(fields: [usuariosid], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model perguntas {
  id                 Int                  @id @default(autoincrement())
  conteudo           String?
  perguntasnivelid   Int
  tempo              Int
  pathimage          String?
  status             Boolean               @default(true)
  categoriasid       Int
  quizid             Int
  categorias   categorias? @relation(fields: [categoriasid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  perguntasnivel   perguntasnivel? @relation(fields: [perguntasnivelid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  quiz  quiz? @relation(fields: [quizid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  alternativas       alternativas[]
  progressoperguntas progressoperguntas[]
  
}

model perguntasnivel {
  id           Int         @id @default(autoincrement())
  nivel        Int
  pontuacao    Int
  tempo        Int
  perguntas    perguntas[]
}

model progressoperguntas {
  id          Int        @id @default(autoincrement())
  usuariosid  Int
  perguntasid Int
  perguntas   perguntas? @relation(fields: [perguntasid], references: [id], onDelete: NoAction, onUpdate: NoAction)
  usuarios    usuarios?  @relation(fields: [usuariosid], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model quiz {
  id         Int        @id @default(autoincrement())
  titulo     String     @db.VarChar(150)
  perguntas  perguntas[]
}

model usuarios {
  id                 Int                  @id @default(autoincrement())
  nome               String               @db.VarChar(255)
  email              String               @unique @db.VarChar(255)
  senha              String               @db.VarChar(255)
  telefone           String               @db.VarChar(15)
  sexo               Int
  datanascimento     DateTime             @db.Date
  role               Int
  uf                 String               @db.VarChar(2)
  foto               String               @db.VarChar(255)
  pontuacao          Int
  status             Boolean              @default(true)
  campus             campus[]
  logs               logs[]
  progressoperguntas progressoperguntas[]
}

model menu{
  id              Int             @id @default(autoincrement())
  urlMenu         String          @unique @db.VarChar(255)
  role            Int 
}
